#
# loader.py
#
# generated by pyemof v0.7.0 on [Fri Sep 16 13:40:03 2005] 
#
# Copyright (C) 2003, 2004, 2005 Raphael Marvie 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
# http://www.fsf.org/licensing/licenses/gpl.html
#
# Author contact: raphael.marvie@lifl.fr
#

from xml.dom import minidom

import core 


class LoadElement (object):

    def __init__(self, post, ids):
        super(LoadElement, self).__init__()
        self._post = post
        self._ids = ids

    def create(self, elt):
        pass

    def process(self, obj, elt):
        pass

    def __call__(self, elt):
        obj = self.create(elt)
        self.process(obj, elt)
        return obj


class Element (LoadElement):

    def __init__(self, post, ids):
        super(Element, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Element()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Element, self).process(obj, elt)


class Object (Element):

    def __init__(self, post, ids):
        super(Object, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Object()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Object, self).process(obj, elt)


class NamedElement (Object):

    def __init__(self, post, ids):
        super(NamedElement, self).__init__(post, ids)

    def create(self, elt):
        obj = core.NamedElement()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(NamedElement, self).process(obj, elt)
        obj.name = elt.getAttribute('name')


class Tag (Object):

    def __init__(self, post, ids):
        super(Tag, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Tag()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Tag, self).process(obj, elt)
        obj.name = elt.getAttribute('name')
        obj.value = elt.getAttribute('value')
        e = elt.firstChild
        while e:
            if e.nodeName == u'element':
                id = e.firstChild.data.strip()
                self._post['append'].append((obj, 'element', id))
            e = e.nextSibling


class Package (NamedElement):

    def __init__(self, post, ids):
        super(Package, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Package()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Package, self).process(obj, elt)
        obj.uri = elt.getAttribute('uri')
        e = elt.firstChild
        while e:
            if e.nodeName == u'nestedPackage':
                clss = loaders[e.getAttribute('xsi:type')]
                o = clss(self._post, self._ids)(e)
                obj.nestedPackage.append(o)
            e = e.nextSibling
        id = elt.getAttribute('nestingPackage')
        if id:
            self._post['set'].append((obj, '_nestingPackage', id))
        e = elt.firstChild
        while e:
            if e.nodeName == u'ownedType':
                clss = loaders[e.getAttribute('xsi:type')]
                o = clss(self._post, self._ids)(e)
                obj.ownedType.append(o)
            e = e.nextSibling


class TypedElement (NamedElement):

    def __init__(self, post, ids):
        super(TypedElement, self).__init__(post, ids)

    def create(self, elt):
        obj = core.TypedElement()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(TypedElement, self).process(obj, elt)
        id = elt.getAttribute('type')
        if id:
            self._post['set'].append((obj, '_type', id))


class EnumerationLiteral (NamedElement):

    def __init__(self, post, ids):
        super(EnumerationLiteral, self).__init__(post, ids)

    def create(self, elt):
        obj = core.EnumerationLiteral()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(EnumerationLiteral, self).process(obj, elt)
        id = elt.getAttribute('enumeration')
        if id:
            self._post['set'].append((obj, '_enumeration', id))


class Type (NamedElement):

    def __init__(self, post, ids):
        super(Type, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Type()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Type, self).process(obj, elt)


class MultiplicityElement (TypedElement):

    def __init__(self, post, ids):
        super(MultiplicityElement, self).__init__(post, ids)

    def create(self, elt):
        obj = core.MultiplicityElement()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(MultiplicityElement, self).process(obj, elt)
        obj.isOrdered = elt.getAttribute('isOrdered')
        obj.isUnique = elt.getAttribute('isUnique')
        obj.lower = elt.getAttribute('lower')
        obj.upper = elt.getAttribute('upper')


class DataType (Type):

    def __init__(self, post, ids):
        super(DataType, self).__init__(post, ids)

    def create(self, elt):
        obj = core.DataType()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(DataType, self).process(obj, elt)
        obj.serializable = elt.getAttribute('serializable')
        obj.defaultValue = elt.getAttribute('defaultValue')
        obj.allowNull = elt.getAttribute('allowNull')


class Class (Type):

    def __init__(self, post, ids):
        super(Class, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Class()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Class, self).process(obj, elt)
        obj.isAbstract = elt.getAttribute('isAbstract')
        e = elt.firstChild
        while e:
            if e.nodeName == u'ownedAttribute':
                clss = loaders[e.getAttribute('xsi:type')]
                o = clss(self._post, self._ids)(e)
                obj.ownedAttribute.append(o)
            e = e.nextSibling
        e = elt.firstChild
        while e:
            if e.nodeName == u'ownedOperation':
                clss = loaders[e.getAttribute('xsi:type')]
                o = clss(self._post, self._ids)(e)
                obj.ownedOperation.append(o)
            e = e.nextSibling
        e = elt.firstChild
        while e:
            if e.nodeName == u'superClass':
                id = e.firstChild.data.strip()
                self._post['append'].append((obj, 'superClass', id))
            e = e.nextSibling


class Operation (MultiplicityElement):

    def __init__(self, post, ids):
        super(Operation, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Operation()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Operation, self).process(obj, elt)
        e = elt.firstChild
        while e:
            if e.nodeName == u'raisedException':
                id = e.firstChild.data.strip()
                self._post['append'].append((obj, 'raisedException', id))
            e = e.nextSibling
        e = elt.firstChild
        while e:
            if e.nodeName == u'ownedParameter':
                clss = loaders[e.getAttribute('xsi:type')]
                o = clss(self._post, self._ids)(e)
                obj.ownedParameter.append(o)
            e = e.nextSibling
        id = elt.getAttribute('class')
        if id:
            self._post['set'].append((obj, '_class_', id))


class Parameter (MultiplicityElement):

    def __init__(self, post, ids):
        super(Parameter, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Parameter()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Parameter, self).process(obj, elt)
        e = elt.firstChild
        while e:
            if e.nodeName == u'operation':
                id = e.firstChild.data.strip()
                self._post['append'].append((obj, 'operation', id))
            e = e.nextSibling


class Property (MultiplicityElement):

    def __init__(self, post, ids):
        super(Property, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Property()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Property, self).process(obj, elt)
        obj.isReadOnly = elt.getAttribute('isReadOnly')
        obj.default = elt.getAttribute('default')
        obj.isComposite = elt.getAttribute('isComposite')
        obj.isDerived = elt.getAttribute('isDerived')
        obj.isId = elt.getAttribute('isId')
        id = elt.getAttribute('opposite')
        if id:
            self._post['set'].append((obj, '_opposite', id))
        id = elt.getAttribute('class')
        if id:
            self._post['set'].append((obj, '_class_', id))


class Enumeration (DataType):

    def __init__(self, post, ids):
        super(Enumeration, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Enumeration()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Enumeration, self).process(obj, elt)
        e = elt.firstChild
        while e:
            if e.nodeName == u'ownedLiteral':
                clss = loaders[e.getAttribute('xsi:type')]
                o = clss(self._post, self._ids)(e)
                obj.ownedLiteral.append(o)
            e = e.nextSibling


class PrimitiveType (DataType):

    def __init__(self, post, ids):
        super(PrimitiveType, self).__init__(post, ids)

    def create(self, elt):
        obj = core.PrimitiveType()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(PrimitiveType, self).process(obj, elt)


class Integer (LoadElement):

    def __init__(self, post, ids):
        super(Integer, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Integer()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Integer, self).process(obj, elt)


class Boolean (LoadElement):

    def __init__(self, post, ids):
        super(Boolean, self).__init__(post, ids)

    def create(self, elt):
        obj = core.Boolean()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(Boolean, self).process(obj, elt)


class String (LoadElement):

    def __init__(self, post, ids):
        super(String, self).__init__(post, ids)

    def create(self, elt):
        obj = core.String()
        obj._xmi_id = elt.getAttribute('xmi:id')
        self._ids[obj._xmi_id] = obj
        return obj

    def process(self, obj, elt):
        super(String, self).process(obj, elt)

loaders = {
    "emof:Element": Element,
    "emof:Object": Object,
    "emof:NamedElement": NamedElement,
    "emof:Tag": Tag,
    "emof:Package": Package,
    "emof:TypedElement": TypedElement,
    "emof:EnumerationLiteral": EnumerationLiteral,
    "emof:Type": Type,
    "emof:MultiplicityElement": MultiplicityElement,
    "emof:DataType": DataType,
    "emof:Class": Class,
    "emof:Operation": Operation,
    "emof:Parameter": Parameter,
    "emof:Property": Property,
    "emof:Enumeration": Enumeration,
    "emof:PrimitiveType": PrimitiveType,
    "emof:Integer": Integer,
    "emof:Boolean": Boolean,
    "emof:String": String    
}


class Loader (object):
    '''emof model loader from an XMI file to a repository.'''

    def __init__(self):
        super(Loader, self).__init__()
        self._post = dict()
        self._post['append'] = list()
        self._post['set'] = list()
        self._ids = dict()

    def _postprocessing(self):
        for obj, attr, id in self._post['append']:
            a = getattr(obj, attr)
            a.append(self._ids[id])
        for obj, attr, id in self._post['set']:
            setattr(obj, attr, self._ids[id])

    def load(self, filename):
        doc = minidom.parse(filename)
        xmi = doc.documentElement
        assert xmi.nodeName == 'xmi:XMI', 'Bad file format'
        rep = core.Repository()
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Element':
                obj = Element(self._post, self._ids)(elt)
                rep.Element.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Object':
                obj = Object(self._post, self._ids)(elt)
                rep.Object.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:NamedElement':
                obj = NamedElement(self._post, self._ids)(elt)
                rep.NamedElement.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Tag':
                obj = Tag(self._post, self._ids)(elt)
                rep.Tag.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Package':
                obj = Package(self._post, self._ids)(elt)
                rep.Package.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:TypedElement':
                obj = TypedElement(self._post, self._ids)(elt)
                rep.TypedElement.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:EnumerationLiteral':
                obj = EnumerationLiteral(self._post, self._ids)(elt)
                rep.EnumerationLiteral.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Type':
                obj = Type(self._post, self._ids)(elt)
                rep.Type.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:MultiplicityElement':
                obj = MultiplicityElement(self._post, self._ids)(elt)
                rep.MultiplicityElement.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:DataType':
                obj = DataType(self._post, self._ids)(elt)
                rep.DataType.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Class':
                obj = Class(self._post, self._ids)(elt)
                rep.Class.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Operation':
                obj = Operation(self._post, self._ids)(elt)
                rep.Operation.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Parameter':
                obj = Parameter(self._post, self._ids)(elt)
                rep.Parameter.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Property':
                obj = Property(self._post, self._ids)(elt)
                rep.Property.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Enumeration':
                obj = Enumeration(self._post, self._ids)(elt)
                rep.Enumeration.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:PrimitiveType':
                obj = PrimitiveType(self._post, self._ids)(elt)
                rep.PrimitiveType.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Integer':
                obj = Integer(self._post, self._ids)(elt)
                rep.Integer.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:Boolean':
                obj = Boolean(self._post, self._ids)(elt)
                rep.Boolean.append(obj)
            elt = elt.nextSibling
        elt = xmi.firstChild
        while elt:
            if elt.nodeName == u'emof:String':
                obj = String(self._post, self._ids)(elt)
                rep.String.append(obj)
            elt = elt.nextSibling
        self._postprocessing()
        return rep

# eof
