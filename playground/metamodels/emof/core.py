#
# emof.py
#
# generated by pyemof v0.7.0 on [Fri Sep 16 13:40:03 2005] 
#
# Copyright (C) 2003, 2004, 2005 Raphael Marvie 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
# http://www.fsf.org/licensing/licenses/gpl.html
#
# Author contact: raphael.marvie@lifl.fr
#



class Element (object):

    _id = 0

    def __init__(self):
        super(Element, self).__init__()
        Element._id += 1
        self._xmi_id = 'Element:%s' % Element._id


class Object (Element):

    _id = 0

    def __init__(self):
        super(Object, self).__init__()
        Object._id += 1
        self._xmi_id = 'Object:%s' % Object._id

    def getMetaClass(self):
        pass

    def container(self):
        pass

    def equals(self, element):
        pass

    def get(self, property):
        pass

    def set(self, property, element):
        pass

    def isSet(self, property):
        pass

    def unset(self, property):
        pass


class NamedElement (Object):

    _id = 0

    def __init__(self):
        super(NamedElement, self).__init__()
        NamedElement._id += 1
        self._xmi_id = 'NamedElement:%s' % NamedElement._id
        self._name = None

    def get_name(self):
        return self._name
    def set_name(self, value):
        self._name = value
    def unset_name(self):
        del self._name 
    name = property(get_name, set_name, unset_name)


class Tag (Object):

    _id = 0

    def __init__(self):
        super(Tag, self).__init__()
        Tag._id += 1
        self._xmi_id = 'Tag:%s' % Tag._id
        self._name = None
        self._value = None
        self._element = list()

    def get_name(self):
        return self._name
    def set_name(self, value):
        self._name = value
    def unset_name(self):
        del self._name 
    name = property(get_name, set_name, unset_name)

    def get_value(self):
        return self._value
    def set_value(self, value):
        self._value = value
    def unset_value(self):
        del self._value 
    value = property(get_value, set_value, unset_value)

    def get_element(self):
        return self._element
    def add_element(self, val):
        self._element.append(val)
    element = property(get_element)


class Package (NamedElement):

    _id = 0

    def __init__(self):
        super(Package, self).__init__()
        Package._id += 1
        self._xmi_id = 'Package:%s' % Package._id
        self._uri = None
        self._nestedPackage = list()
        self._nestingPackage = None
        self._ownedType = list()

    def get_uri(self):
        return self._uri
    def set_uri(self, value):
        self._uri = value
    def unset_uri(self):
        del self._uri 
    uri = property(get_uri, set_uri, unset_uri)

    def get_nestedPackage(self):
        return self._nestedPackage
    def add_nestedPackage(self, value, other=True):
        self._nestedPackage.append(value)
        if other:
            value.set_nestingPackage(self, False)
    nestedPackage = property(get_nestedPackage)

    def get_nestingPackage(self):
        return self._nestingPackage
    def set_nestingPackage(self, value, other=True):
        self._nestingPackage = value
        if other:
            value.add_nestedPackage(self, False)
    def unset_nestingPackage(self):
        del self._nestingPackage 
    nestingPackage = property(get_nestingPackage, set_nestingPackage, unset_nestingPackage)

    def get_ownedType(self):
        return self._ownedType
    def add_ownedType(self, val):
        self._ownedType.append(val)
    ownedType = property(get_ownedType)


class TypedElement (NamedElement):

    _id = 0

    def __init__(self):
        super(TypedElement, self).__init__()
        TypedElement._id += 1
        self._xmi_id = 'TypedElement:%s' % TypedElement._id
        self._type = None

    def get_type(self):
        return self._type
    def set_type(self, value):
        self._type = value
    def unset_type(self):
        del self._type 
    type = property(get_type, set_type, unset_type)


class EnumerationLiteral (NamedElement):

    _id = 0

    def __init__(self):
        super(EnumerationLiteral, self).__init__()
        EnumerationLiteral._id += 1
        self._xmi_id = 'EnumerationLiteral:%s' % EnumerationLiteral._id
        self._enumeration = None

    def get_enumeration(self):
        return self._enumeration
    def set_enumeration(self, value, other=True):
        self._enumeration = value
        if other:
            value.add_ownedLiteral(self, False)
    def unset_enumeration(self):
        del self._enumeration 
    enumeration = property(get_enumeration, set_enumeration, unset_enumeration)


class Type (NamedElement):

    _id = 0

    def __init__(self):
        super(Type, self).__init__()
        Type._id += 1
        self._xmi_id = 'Type:%s' % Type._id

    def isInstance(self, element):
        pass


class MultiplicityElement (TypedElement):

    _id = 0

    def __init__(self):
        super(MultiplicityElement, self).__init__()
        MultiplicityElement._id += 1
        self._xmi_id = 'MultiplicityElement:%s' % MultiplicityElement._id
        self._isOrdered = False
        self._isUnique = True
        self._lower = None
        self._upper = None

    def get_isOrdered(self):
        return self._isOrdered
    def set_isOrdered(self, value):
        self._isOrdered = value
    def unset_isOrdered(self):
        del self._isOrdered 
    isOrdered = property(get_isOrdered, set_isOrdered, unset_isOrdered)

    def get_isUnique(self):
        return self._isUnique
    def set_isUnique(self, value):
        self._isUnique = value
    def unset_isUnique(self):
        del self._isUnique 
    isUnique = property(get_isUnique, set_isUnique, unset_isUnique)

    def get_lower(self):
        return self._lower
    def set_lower(self, value):
        self._lower = value
    def unset_lower(self):
        del self._lower 
    lower = property(get_lower, set_lower, unset_lower)

    def get_upper(self):
        return self._upper
    def set_upper(self, value):
        self._upper = value
    def unset_upper(self):
        del self._upper 
    upper = property(get_upper, set_upper, unset_upper)


class DataType (Type):

    _id = 0

    def __init__(self):
        super(DataType, self).__init__()
        DataType._id += 1
        self._xmi_id = 'DataType:%s' % DataType._id
        self._serializable = None
        self._defaultValue = None
        self._allowNull = None

    def get_serializable(self):
        return self._serializable
    def set_serializable(self, value):
        self._serializable = value
    def unset_serializable(self):
        del self._serializable 
    serializable = property(get_serializable, set_serializable, unset_serializable)

    def get_defaultValue(self):
        return self._defaultValue
    def set_defaultValue(self, value):
        self._defaultValue = value
    def unset_defaultValue(self):
        del self._defaultValue 
    defaultValue = property(get_defaultValue, set_defaultValue, unset_defaultValue)

    def get_allowNull(self):
        return self._allowNull
    def set_allowNull(self, value):
        self._allowNull = value
    def unset_allowNull(self):
        del self._allowNull 
    allowNull = property(get_allowNull, set_allowNull, unset_allowNull)


class Class (Type):

    _id = 0

    def __init__(self):
        super(Class, self).__init__()
        Class._id += 1
        self._xmi_id = 'Class:%s' % Class._id
        self._isAbstract = False
        self._ownedAttribute = list()
        self._ownedOperation = list()
        self._superClass = list()

    def get_isAbstract(self):
        return self._isAbstract
    def set_isAbstract(self, value):
        self._isAbstract = value
    def unset_isAbstract(self):
        del self._isAbstract 
    isAbstract = property(get_isAbstract, set_isAbstract, unset_isAbstract)

    def get_ownedAttribute(self):
        return self._ownedAttribute
    def add_ownedAttribute(self, value, other=True):
        self._ownedAttribute.append(value)
        if other:
            value.set_class_(self, False)
    ownedAttribute = property(get_ownedAttribute)

    def get_ownedOperation(self):
        return self._ownedOperation
    def add_ownedOperation(self, value, other=True):
        self._ownedOperation.append(value)
        if other:
            value.set_class_(self, False)
    ownedOperation = property(get_ownedOperation)

    def get_superClass(self):
        return self._superClass
    def add_superClass(self, val):
        self._superClass.append(val)
    superClass = property(get_superClass)


class Operation (MultiplicityElement):

    _id = 0

    def __init__(self):
        super(Operation, self).__init__()
        Operation._id += 1
        self._xmi_id = 'Operation:%s' % Operation._id
        self._raisedException = list()
        self._ownedParameter = list()
        self._class_ = None

    def get_raisedException(self):
        return self._raisedException
    def add_raisedException(self, val):
        self._raisedException.append(val)
    raisedException = property(get_raisedException)

    def get_ownedParameter(self):
        return self._ownedParameter
    def add_ownedParameter(self, value, other=True):
        self._ownedParameter.append(value)
        if other:
            value.add_operation(self, False)
    ownedParameter = property(get_ownedParameter)

    def get_class_(self):
        return self._class_
    def set_class_(self, value, other=True):
        self._class_ = value
        if other:
            value.add_ownedOperation(self, False)
    def unset_class_(self):
        del self._class_ 
    class_ = property(get_class_, set_class_, unset_class_)


class Parameter (MultiplicityElement):

    _id = 0

    def __init__(self):
        super(Parameter, self).__init__()
        Parameter._id += 1
        self._xmi_id = 'Parameter:%s' % Parameter._id
        self._operation = list()

    def get_operation(self):
        return self._operation
    def add_operation(self, value, other=True):
        self._operation.append(value)
        if other:
            value.add_ownedParameter(self, False)
    operation = property(get_operation)


class Property (MultiplicityElement):

    _id = 0

    def __init__(self):
        super(Property, self).__init__()
        Property._id += 1
        self._xmi_id = 'Property:%s' % Property._id
        self._isReadOnly = False
        self._default = None
        self._isComposite = False
        self._isDerived = False
        self._isId = None
        self._opposite = None
        self._class_ = None

    def get_isReadOnly(self):
        return self._isReadOnly
    def set_isReadOnly(self, value):
        self._isReadOnly = value
    def unset_isReadOnly(self):
        del self._isReadOnly 
    isReadOnly = property(get_isReadOnly, set_isReadOnly, unset_isReadOnly)

    def get_default(self):
        return self._default
    def set_default(self, value):
        self._default = value
    def unset_default(self):
        del self._default 
    default = property(get_default, set_default, unset_default)

    def get_isComposite(self):
        return self._isComposite
    def set_isComposite(self, value):
        self._isComposite = value
    def unset_isComposite(self):
        del self._isComposite 
    isComposite = property(get_isComposite, set_isComposite, unset_isComposite)

    def get_isDerived(self):
        return self._isDerived
    def set_isDerived(self, value):
        self._isDerived = value
    def unset_isDerived(self):
        del self._isDerived 
    isDerived = property(get_isDerived, set_isDerived, unset_isDerived)

    def get_isId(self):
        return self._isId
    def set_isId(self, value):
        self._isId = value
    def unset_isId(self):
        del self._isId 
    isId = property(get_isId, set_isId, unset_isId)

    def get_opposite(self):
        return self._opposite
    def set_opposite(self, value):
        self._opposite = value
    def unset_opposite(self):
        del self._opposite 
    opposite = property(get_opposite, set_opposite, unset_opposite)

    def get_class_(self):
        return self._class_
    def set_class_(self, value, other=True):
        self._class_ = value
        if other:
            value.add_ownedAttribute(self, False)
    def unset_class_(self):
        del self._class_ 
    class_ = property(get_class_, set_class_, unset_class_)


class Enumeration (DataType):

    _id = 0

    def __init__(self):
        super(Enumeration, self).__init__()
        Enumeration._id += 1
        self._xmi_id = 'Enumeration:%s' % Enumeration._id
        self._ownedLiteral = list()

    def get_ownedLiteral(self):
        return self._ownedLiteral
    def add_ownedLiteral(self, value, other=True):
        self._ownedLiteral.append(value)
        if other:
            value.set_enumeration(self, False)
    ownedLiteral = property(get_ownedLiteral)


class PrimitiveType (DataType):

    _id = 0

    def __init__(self):
        super(PrimitiveType, self).__init__()
        PrimitiveType._id += 1
        self._xmi_id = 'PrimitiveType:%s' % PrimitiveType._id


class Integer (object):

    _id = 0

    def __init__(self):
        super(Integer, self).__init__()
        Integer._id += 1
        self._xmi_id = 'Integer:%s' % Integer._id


class Boolean (object):

    _id = 0

    def __init__(self):
        super(Boolean, self).__init__()
        Boolean._id += 1
        self._xmi_id = 'Boolean:%s' % Boolean._id


class String (object):

    _id = 0

    def __init__(self):
        super(String, self).__init__()
        String._id += 1
        self._xmi_id = 'String:%s' % String._id


class Repository (object):

    def __init__(self):
        self._Element = list()
        self._Object = list()
        self._NamedElement = list()
        self._Tag = list()
        self._Package = list()
        self._TypedElement = list()
        self._EnumerationLiteral = list()
        self._Type = list()
        self._MultiplicityElement = list()
        self._DataType = list()
        self._Class = list()
        self._Operation = list()
        self._Parameter = list()
        self._Property = list()
        self._Enumeration = list()
        self._PrimitiveType = list()
        self._Integer = list()
        self._Boolean = list()
        self._String = list()

    def get_Element(self):
        return self._Element
    def add_Element(self, val):
        self._Element.append(val)
    Element = property(get_Element)

    def get_Object(self):
        return self._Object
    def add_Object(self, val):
        self._Object.append(val)
    Object = property(get_Object)

    def get_NamedElement(self):
        return self._NamedElement
    def add_NamedElement(self, val):
        self._NamedElement.append(val)
    NamedElement = property(get_NamedElement)

    def get_Tag(self):
        return self._Tag
    def add_Tag(self, val):
        self._Tag.append(val)
    Tag = property(get_Tag)

    def get_Package(self):
        return self._Package
    def add_Package(self, val):
        self._Package.append(val)
    Package = property(get_Package)

    def get_TypedElement(self):
        return self._TypedElement
    def add_TypedElement(self, val):
        self._TypedElement.append(val)
    TypedElement = property(get_TypedElement)

    def get_EnumerationLiteral(self):
        return self._EnumerationLiteral
    def add_EnumerationLiteral(self, val):
        self._EnumerationLiteral.append(val)
    EnumerationLiteral = property(get_EnumerationLiteral)

    def get_Type(self):
        return self._Type
    def add_Type(self, val):
        self._Type.append(val)
    Type = property(get_Type)

    def get_MultiplicityElement(self):
        return self._MultiplicityElement
    def add_MultiplicityElement(self, val):
        self._MultiplicityElement.append(val)
    MultiplicityElement = property(get_MultiplicityElement)

    def get_DataType(self):
        return self._DataType
    def add_DataType(self, val):
        self._DataType.append(val)
    DataType = property(get_DataType)

    def get_Class(self):
        return self._Class
    def add_Class(self, val):
        self._Class.append(val)
    Class = property(get_Class)

    def get_Operation(self):
        return self._Operation
    def add_Operation(self, val):
        self._Operation.append(val)
    Operation = property(get_Operation)

    def get_Parameter(self):
        return self._Parameter
    def add_Parameter(self, val):
        self._Parameter.append(val)
    Parameter = property(get_Parameter)

    def get_Property(self):
        return self._Property
    def add_Property(self, val):
        self._Property.append(val)
    Property = property(get_Property)

    def get_Enumeration(self):
        return self._Enumeration
    def add_Enumeration(self, val):
        self._Enumeration.append(val)
    Enumeration = property(get_Enumeration)

    def get_PrimitiveType(self):
        return self._PrimitiveType
    def add_PrimitiveType(self, val):
        self._PrimitiveType.append(val)
    PrimitiveType = property(get_PrimitiveType)

    def get_Integer(self):
        return self._Integer
    def add_Integer(self, val):
        self._Integer.append(val)
    Integer = property(get_Integer)

    def get_Boolean(self):
        return self._Boolean
    def add_Boolean(self, val):
        self._Boolean.append(val)
    Boolean = property(get_Boolean)

    def get_String(self):
        return self._String
    def add_String(self, val):
        self._String.append(val)
    String = property(get_String)

# eof
